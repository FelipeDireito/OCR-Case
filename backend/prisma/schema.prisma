// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  documents     Document[]
  conversations Conversation[]
}

model Document {
  id            String        @id @default(uuid())
  fileName      String
  fileUrl       String
  fileType      String
  fileSize      Int
  extractedText String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
}

model Conversation {
  id          String    @id @default(uuid())
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.Text
  role           String       // 'user' or 'assistant'
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
